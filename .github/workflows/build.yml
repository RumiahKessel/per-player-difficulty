# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.

name: build

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

on:
  push:           # Build for all branches
    branches: ['**']
  pull_request:
jobs:
  build:
    runs-on: ubuntu-24.04
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract branch name
        id: extract_branch
        run: echo "branch=${GITHUB_REF##*/}" >> "$GITHUB_OUTPUT"

      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'microsoft'

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Build mod
        run: ./gradlew build

      - name: Upload mod jars
        uses: actions/upload-artifact@v4
        with:
          name: mod-jars
          path: build/libs/*.jar

  release:
    needs: build
    if: github.event_name == 'push'  # Only create release on push (not PRs)
    runs-on: ubuntu-24.04
    permissions:
      contents: write  # Explicitly grant release permissions
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: mod-jars
          path: artifacts

      - name: Extract branch name again
        id: extract_branch
        run: echo "branch=${GITHUB_REF##*/}" >> "$GITHUB_OUTPUT"

      - name: Force update release tag
        run: |
          # Clean slate: delete release and tag
          gh release delete latest-${{ steps.extract_branch.outputs.branch }} --yes || true
          git tag -d latest-${{ steps.extract_branch.outputs.branch }} || true
          git push --delete origin latest-${{ steps.extract_branch.outputs.branch }} || true

          # Create fresh tag at current commit
          git tag latest-${{ steps.extract_branch.outputs.branch }}
          git push origin latest-${{ steps.extract_branch.outputs.branch }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest-${{ steps.extract_branch.outputs.branch }}
          name: Latest Build (${{ steps.extract_branch.outputs.branch }})
          files: artifacts/*.jar
          prerelease: true
          draft: false
          make_latest: false
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
